/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         Aqlparse
#define yylex           Aqllex
#define yyerror         Aqlerror
#define yydebug         Aqldebug
#define yynerrs         Aqlnerrs


/* Copy the first part of user declarations.  */
#line 9 "Aql/grammar.y" /* yacc.c:339  */

// we are using alloca here explicitly because we may
// otherwise leak error messages that are generated by Bison.
// Bison reports all its errors via the function `Aqlerror`, which
// will receive the error message as a constant string. So we
// must not free the string inside `Aqlerror`, and we cannot even
// tell if the error message is a dynamically allocated error 
// message or a hard-coded error message that resides in some
// static part of the program.
// Even worse, `Aqlerror` does not return control to Bison but throws
// an exception... So the best thing we can do here is to not use
// dynamically memory allocation by Bison, but make it use alloca.
#define YYSTACK_USE_ALLOCA 1

#include "Aql/Aggregator.h"
#include "Aql/AstNode.h"
#include "Aql/Function.h"
#include "Aql/Parser.h"
#include "Aql/Quantifier.h"
#include "Aql/Query.h"
#include "Aql/types.h"
#include "Basics/SmallVector.h"
#include "Basics/tri-strings.h"
#include "Transaction/Context.h"
#include "VocBase/AccessMode.h"

#line 99 "Aql/grammar.cpp" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 1
#endif

/* In a future release of Bison, this section will be replaced
   by #include "grammar.hpp".  */
#ifndef YY_AQL_AQL_GRAMMAR_HPP_INCLUDED
# define YY_AQL_AQL_GRAMMAR_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int Aqldebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    T_END = 0,
    T_FOR = 258,
    T_LET = 259,
    T_FILTER = 260,
    T_RETURN = 261,
    T_COLLECT = 262,
    T_SORT = 263,
    T_LIMIT = 264,
    T_ASC = 265,
    T_DESC = 266,
    T_IN = 267,
    T_WITH = 268,
    T_INTO = 269,
    T_AGGREGATE = 270,
    T_GRAPH = 271,
    T_SHORTEST_PATH = 272,
    T_DISTINCT = 273,
    T_REMOVE = 274,
    T_INSERT = 275,
    T_UPDATE = 276,
    T_REPLACE = 277,
    T_UPSERT = 278,
    T_NULL = 279,
    T_TRUE = 280,
    T_FALSE = 281,
    T_STRING = 282,
    T_QUOTED_STRING = 283,
    T_INTEGER = 284,
    T_DOUBLE = 285,
    T_PARAMETER = 286,
    T_DATA_SOURCE_PARAMETER = 287,
    T_ASSIGN = 288,
    T_NOT = 289,
    T_AND = 290,
    T_OR = 291,
    T_NIN = 292,
    T_REGEX_MATCH = 293,
    T_REGEX_NON_MATCH = 294,
    T_EQ = 295,
    T_NE = 296,
    T_LT = 297,
    T_GT = 298,
    T_LE = 299,
    T_GE = 300,
    T_LIKE = 301,
    T_PLUS = 302,
    T_MINUS = 303,
    T_TIMES = 304,
    T_DIV = 305,
    T_MOD = 306,
    T_QUESTION = 307,
    T_COLON = 308,
    T_SCOPE = 309,
    T_RANGE = 310,
    T_SPREAD = 311,
    T_COMMA = 312,
    T_OPEN = 313,
    T_CLOSE = 314,
    T_OBJECT_OPEN = 315,
    T_OBJECT_CLOSE = 316,
    T_ARRAY_OPEN = 317,
    T_ARRAY_CLOSE = 318,
    T_OUTBOUND = 319,
    T_INBOUND = 320,
    T_ANY = 321,
    T_ALL = 322,
    T_NONE = 323,
    UMINUS = 324,
    UPLUS = 325,
    FUNCCALL = 326,
    REFERENCE = 327,
    INDEXED = 328,
    EXPANSION = 329
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

union YYSTYPE
{
#line 36 "Aql/grammar.y" /* yacc.c:355  */

  arangodb::aql::AstNode*  node;
  struct {
    char*                  value;
    size_t                 length;
  }                        strval;
  bool                     boolval;
  int64_t                  intval;

#line 225 "Aql/grammar.cpp" /* yacc.c:355  */
};

typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int Aqlparse (arangodb::aql::Parser* parser);

#endif /* !YY_AQL_AQL_GRAMMAR_HPP_INCLUDED  */

/* Copy the second part of user declarations.  */
#line 46 "Aql/grammar.y" /* yacc.c:358  */


using namespace arangodb::aql;

/// @brief shortcut macro for signaling out of memory
#define ABORT_OOM                                   \
  parser->registerError(TRI_ERROR_OUT_OF_MEMORY);   \
  YYABORT;

#define scanner parser->scanner()

/// @brief forward for lexer function defined in Aql/tokens.ll
int Aqllex(YYSTYPE*, YYLTYPE*, void*);
 
/// @brief register parse error (this will also abort the currently running query)
void Aqlerror(YYLTYPE* locp, 
              arangodb::aql::Parser* parser,
              char const* message) {
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, message, locp->first_line, locp->first_column);
}

namespace {

// forward declarations
void destructureObject(Parser* parser, std::string const& sourceVariable, 
                       arangodb::SmallVector<AstNode const*>& paths, AstNode const* array);
void destructureArray(Parser* parser, std::string const& sourceVariable, 
                      arangodb::SmallVector<AstNode const*>& paths, AstNode const* array);


/// @brief check if any of the variables used in the INTO expression were
/// introduced by the COLLECT itself, in which case it would fail
void checkIntoVariables(Parser* parser, AstNode const* expression,
                        int line, int column,
                        arangodb::HashSet<Variable const*> const& variablesIntroduced) {
  if (expression == nullptr) {
    return;
  }
  
  arangodb::HashSet<Variable const*> varsInAssignment;
  Ast::getReferencedVariables(expression, varsInAssignment);

  for (auto const& it : varsInAssignment) {
    if (variablesIntroduced.find(it) != variablesIntroduced.end()) {
      std::string msg("use of COLLECT variable '" + it->name + "' inside same COLLECT's INTO expression");
      parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name.c_str(), line, column);
      return;
    }
  }
}

/// @brief register variables in the scope
void registerAssignVariables(Parser* parser, arangodb::aql::Scopes* scopes, 
                             int line, int column,
                             arangodb::HashSet<Variable const*>& variablesIntroduced, 
                             AstNode const* vars) {
  arangodb::HashSet<Variable const*> varsInAssignment;
   
  size_t const n = vars->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = vars->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      // check if any of the assignment refers to a variable introduced by this very
      // same COLLECT, e.g. COLLECT aggregate x = .., y = x 
      varsInAssignment.clear();
      Ast::getReferencedVariables(member->getMember(1), varsInAssignment);
      for (auto const& it : varsInAssignment) {
        if (variablesIntroduced.find(it) != variablesIntroduced.end()) {
          std::string msg("use of COLLECT variable '" + it->name + "' inside same COLLECT");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name.c_str(), line, column);
          return;
        }
      }

      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      scopes->addVariable(v);
      variablesIntroduced.emplace(v);
    }
  }
}

/// @brief validate the aggregate variables expressions
bool validateAggregates(Parser* parser, AstNode const* aggregates) {
  size_t const n = aggregates->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = aggregates->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      
      auto func = member->getMember(1);

      bool isValid = true;
      if (func->type != NODE_TYPE_FCALL) {
        // aggregate expression must be a function call
        isValid = false;
      }
      else {
        auto f = static_cast<arangodb::aql::Function*>(func->getData());
        if (!Aggregator::isValid(f->name)) {
          // aggregate expression must be a call to MIN|MAX|LENGTH...
          isValid = false;
        }
      }

      if (!isValid) {
        parser->registerError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION);
        return false;
      }
    }
  }

  return true;
}

void destructureArray(Parser* parser, std::string const& sourceVariable, 
                      arangodb::SmallVector<AstNode const*>& paths, AstNode const* array) {
  int64_t index = 0;
  size_t const n = array->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = array->getMember(i);
    
    if (member->type == NODE_TYPE_ARRAY) {
      // array value => recurse
      AstNode* indexNode = parser->ast()->createNodeValueInt(index, false);
      paths.emplace_back(indexNode);
  
      int64_t tag = member->getIntValue(true);
      if (tag == 1) {
        destructureArray(parser, sourceVariable, paths, member);
      } else {
        destructureObject(parser, sourceVariable, paths, member);
      }

      paths.pop_back();
    } else if (member->type == NODE_TYPE_VARIABLE) {
      // an actual variable assignment. we need to do something!
      AstNode* indexNode = parser->ast()->createNodeValueInt(index, false);
      paths.emplace_back(indexNode);

      AstNode const* accessor = parser->ast()->createNodeReference(sourceVariable.data(), sourceVariable.size());
      for (auto const& it : paths) {
        accessor = parser->ast()->createNodeIndexedAccess(accessor, it);
      }
      AstNode* node = parser->ast()->createNodeLet(member, accessor);
      parser->ast()->addOperation(node);
      
      paths.pop_back();
    }

    ++index;
  }
}

void destructureObject(Parser* parser, std::string const& sourceVariable, 
                       arangodb::SmallVector<AstNode const*>& paths, AstNode const* array) {
  size_t const n = array->numMembers();
  
  for (size_t i = 0; i < n; i += 2) {
    auto member = array->getMember(i);
    
    if (member->isStringValue()) {
      AstNode const* assigned = array->getMember(i + 1);
      
      paths.emplace_back(member);
      if (assigned->type == NODE_TYPE_ARRAY) {
        // need to recurse
        int64_t tag = assigned->getIntValue(true);
        if (tag == 1) {
          destructureArray(parser, sourceVariable, paths, assigned);
        } else {
          destructureObject(parser, sourceVariable, paths, assigned);
        }
      } else if (assigned->type == NODE_TYPE_VARIABLE) {
        AstNode* accessor = parser->ast()->createNodeReference(sourceVariable.data(), sourceVariable.size());
        for (auto const& it : paths) {
          accessor = parser->ast()->createNodeIndexedAccess(accessor, it);
        }
        AstNode* node = parser->ast()->createNodeLet(assigned, accessor);
        parser->ast()->addOperation(node);
      }
      paths.pop_back();
    }
  }
}

/// @brief start a new scope for the collect
bool startCollectScope(arangodb::aql::Scopes* scopes) { 
  // check if we are in the main scope
  if (scopes->type() == arangodb::aql::AQL_SCOPE_MAIN) {
    return false;
  }

  // end the active scopes
  scopes->endNested();
  // start a new scope
  scopes->start(arangodb::aql::AQL_SCOPE_COLLECT);
  return true;
}

/// @brief get the INTO variable stored in a node (may not exist)
AstNode const* getIntoVariable(Parser* parser, AstNode const* node) {
  if (node == nullptr) {
    return nullptr;
  }

  if (node->type == NODE_TYPE_VALUE) {
    // node is a string containing the variable name
    return parser->ast()->createNodeVariable(node->getStringValue(), node->getStringLength(), true);
  }

  // node is an array with the variable name as the first member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  auto v = node->getMember(0);
  TRI_ASSERT(v->type == NODE_TYPE_VALUE);
  return parser->ast()->createNodeVariable(v->getStringValue(), v->getStringLength(), true);
}

/// @brief get the INTO variable = expression stored in a node (may not exist)
AstNode const* getIntoExpression(AstNode const* node) {
  if (node == nullptr || node->type == NODE_TYPE_VALUE) {
    return nullptr;
  }

  // node is an array with the expression as the second member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  return node->getMember(1);
}

} // namespace


#line 497 "Aql/grammar.cpp" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  7
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1551

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  76
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  102
/* YYNRULES -- Number of rules.  */
#define YYNRULES  248
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  419

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   329

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,    75,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   465,   465,   468,   481,   485,   489,   496,   498,   498,
     510,   515,   520,   522,   525,   528,   531,   534,   540,   542,
     547,   549,   551,   553,   555,   557,   559,   561,   563,   565,
     567,   572,   572,   620,   622,   627,   632,   637,   645,   653,
     664,   672,   677,   679,   684,   688,   697,   709,   709,   719,
     722,   725,   728,   731,   736,   736,   746,   750,   754,   758,
     762,   766,   771,   781,   781,   795,   804,   816,   840,   896,
     915,   942,   944,   949,   956,   959,   962,   971,   985,  1002,
    1002,  1016,  1016,  1026,  1026,  1037,  1040,  1046,  1052,  1055,
    1058,  1061,  1067,  1072,  1079,  1087,  1090,  1096,  1106,  1116,
    1124,  1135,  1140,  1148,  1159,  1164,  1167,  1173,  1177,  1173,
    1229,  1232,  1235,  1241,  1241,  1251,  1257,  1260,  1263,  1266,
    1269,  1272,  1278,  1281,  1297,  1297,  1306,  1306,  1316,  1319,
    1322,  1328,  1331,  1334,  1337,  1340,  1343,  1346,  1349,  1352,
    1355,  1358,  1361,  1364,  1367,  1370,  1373,  1379,  1385,  1392,
    1395,  1398,  1401,  1404,  1407,  1410,  1413,  1419,  1422,  1428,
    1430,  1435,  1438,  1442,  1442,  1458,  1461,  1467,  1470,  1476,
    1476,  1485,  1487,  1489,  1494,  1496,  1501,  1504,  1511,  1514,
    1540,  1560,  1563,  1577,  1577,  1586,  1588,  1590,  1595,  1597,
    1602,  1616,  1620,  1624,  1633,  1640,  1643,  1649,  1652,  1658,
    1661,  1664,  1670,  1673,  1679,  1682,  1685,  1689,  1695,  1699,
    1706,  1712,  1712,  1721,  1725,  1734,  1737,  1740,  1746,  1749,
    1755,  1788,  1791,  1794,  1801,  1811,  1811,  1824,  1839,  1853,
    1867,  1867,  1910,  1913,  1919,  1926,  1936,  1939,  1942,  1945,
    1948,  1954,  1958,  1962,  1972,  1979,  1985,  1988,  1993
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 1
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of query string\"", "error", "$undefined", "\"FOR declaration\"",
  "\"LET declaration\"", "\"FILTER declaration\"",
  "\"RETURN declaration\"", "\"COLLECT declaration\"",
  "\"SORT declaration\"", "\"LIMIT declaration\"", "\"ASC keyword\"",
  "\"DESC keyword\"", "\"IN keyword\"", "\"WITH keyword\"",
  "\"INTO keyword\"", "\"AGGREGATE keyword\"", "\"GRAPH keyword\"",
  "\"SHORTEST_PATH keyword\"", "\"DISTINCT modifier\"",
  "\"REMOVE command\"", "\"INSERT command\"", "\"UPDATE command\"",
  "\"REPLACE command\"", "\"UPSERT command\"", "\"null\"", "\"true\"",
  "\"false\"", "\"identifier\"", "\"quoted string\"", "\"integer number\"",
  "\"number\"", "\"bind parameter\"", "\"bind data source parameter\"",
  "\"assignment\"", "\"not operator\"", "\"and operator\"",
  "\"or operator\"", "\"not in operator\"", "\"~= operator\"",
  "\"~! operator\"", "\"== operator\"", "\"!= operator\"",
  "\"< operator\"", "\"> operator\"", "\"<= operator\"", "\">= operator\"",
  "\"like operator\"", "\"+ operator\"", "\"- operator\"",
  "\"* operator\"", "\"/ operator\"", "\"% operator\"", "\"?\"", "\":\"",
  "\"::\"", "\"..\"", "\"...\"", "\",\"", "\"(\"", "\")\"", "\"{\"",
  "\"}\"", "\"[\"", "\"]\"", "\"outbound modifier\"",
  "\"inbound modifier\"", "\"any modifier\"", "\"all modifier\"",
  "\"none modifier\"", "UMINUS", "UPLUS", "FUNCCALL", "REFERENCE",
  "INDEXED", "EXPANSION", "'.'", "$accept", "with_collection",
  "with_collection_list", "optional_with", "$@1", "queryStart", "query",
  "final_statement", "optional_statement_block_statements",
  "statement_block_statement", "for_statement", "$@2",
  "traversal_statement", "shortest_path_statement", "filter_statement",
  "let_statement", "let_list", "let_element", "array_destructuring", "$@3",
  "array_destructuring_element", "object_destructuring", "$@4",
  "object_destructuring_element", "count_into", "collect_variable_list",
  "$@5", "collect_statement", "collect_list", "collect_element",
  "collect_optional_into", "variable_list", "keep", "$@6", "aggregate",
  "$@7", "sort_statement", "$@8", "sort_list", "sort_element",
  "sort_direction", "limit_statement", "return_statement",
  "in_or_into_collection", "remove_statement", "insert_statement",
  "update_parameters", "update_statement", "replace_parameters",
  "replace_statement", "update_or_replace", "upsert_statement", "$@9",
  "$@10", "quantifier", "distinct_expression", "$@11", "expression",
  "function_name", "function_call", "$@12", "$@13", "operator_unary",
  "operator_binary", "operator_ternary",
  "optional_function_call_arguments", "expression_or_query", "$@14",
  "function_arguments_list", "compound_value", "array", "$@15",
  "optional_array_elements", "array_elements_list", "array_element",
  "for_options", "options", "object", "$@16", "optional_object_elements",
  "object_elements_list", "object_element", "array_filter_operator",
  "optional_array_filter", "optional_array_limit", "optional_array_return",
  "graph_collection", "graph_collection_list", "graph_subject", "$@17",
  "graph_direction", "graph_direction_steps", "reference", "$@18", "$@19",
  "simple_value", "numeric_value", "value_literal",
  "in_or_into_collection_name", "bind_parameter", "object_element_name",
  "variable_name", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,    46
};
# endif

#define YYPACT_NINF -355

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-355)))

#define YYTABLE_NINF -247

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      27,  -355,  -355,    22,    98,  -355,   853,  -355,  -355,  -355,
    -355,  -355,    96,  -355,    38,   -12,  1464,    90,    63,  -355,
    1464,  1464,  1464,  1464,  1464,  -355,  -355,  -355,  -355,  -355,
    -355,    91,  -355,  -355,  -355,  -355,     9,    10,    14,    35,
      36,    98,  -355,  -355,  -355,  -355,     6,  -355,  -355,   -44,
    -355,   -10,    16,    31,  -355,  -355,  -355,    77,  -355,  -355,
    -355,  1464,    17,  1464,  1464,  1464,  -355,  -355,  1091,   146,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,   -23,  -355,  -355,
    -355,  -355,  -355,  1091,    58,  -355,    59,    38,    74,  1464,
     676,   718,   718,  -355,   509,  -355,   553,  1464,    38,    59,
      70,    74,  -355,  1244,    38,    38,   -12,   -12,  1464,  1464,
    1464,  -355,  -355,  -355,  -355,   759,  -355,   164,  1308,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1347,  1464,  -355,
    -355,  -355,   351,    80,  -355,  1386,   167,  1464,    99,    38,
      72,  -355,    76,  -355,   108,    59,    92,  -355,   423,  1464,
    1489,   186,    59,    59,  1464,    59,  1464,    59,  1091,   118,
    -355,    72,    59,  -355,    59,  -355,  -355,  -355,   594,   163,
    1464,    13,   196,   132,  -355,    33,  -355,  -355,  -355,  1091,
    1091,  1091,  1269,  -355,   134,   166,  -355,   174,  1464,  1464,
     176,   171,  -355,   205,  1464,  1091,   189,   198,  -355,   253,
    1172,  1132,   253,  1212,  1212,  1212,  1212,   183,   183,   183,
     183,  1212,   227,   227,  -355,  -355,  -355,  1464,   800,   199,
    1464,  1464,  1464,  1464,  1464,  1464,  1464,  1464,  -355,  1269,
    -355,   842,   214,  -355,  -355,  1091,    38,    76,  -355,    38,
    1464,  -355,  1464,  -355,  -355,  -355,  -355,  -355,  -355,  1091,
     202,    24,   353,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
     718,  -355,   718,  -355,   242,  1464,    38,  -355,  -355,   570,
     238,  -355,  1464,   465,  1244,    38,    38,  -355,   -12,   -12,
    -355,  1464,  1091,   207,  -355,  -355,   223,  -355,  1464,  1091,
     883,  -355,   164,  1464,  1091,  -355,  1308,  1091,  1464,   253,
     253,  1212,  1212,   183,   183,   183,   183,   224,  -355,  -355,
     277,  -355,  -355,  1091,  -355,    59,    59,  1464,  1091,   228,
    -355,  1464,  -355,   925,   184,  -355,   229,    59,   213,  -355,
     594,   267,  1464,   276,  -355,  -355,  -355,  -355,  -355,  1091,
    -355,  -355,  1425,  1091,   239,  -355,  1091,  -355,  1091,  -355,
    1464,   290,  -355,  -355,   635,    38,   967,  1464,  -355,  -355,
    -355,  -355,  -355,  -355,  1464,   465,  1244,  -355,  1464,  1091,
    1464,   299,  -355,  -355,  1464,  -355,  1464,   465,   112,  1009,
      59,  -355,  1464,  1091,  1050,  1464,   246,   718,  1091,    59,
    -355,   254,  1464,  -355,   465,  1464,  1091,  -355,    59,  -355,
     112,   465,    59,  1091,  -355,  -355,    59,  -355,  -355
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       7,     8,    18,     0,     0,    10,     0,     1,     2,   245,
     244,     4,     9,     3,     0,     0,     0,     0,    63,    83,
       0,     0,     0,     0,     0,   107,    11,    19,    20,    22,
      21,    74,    23,    24,    25,    12,    26,    27,    28,    29,
      30,     0,     6,   248,    33,    34,     0,    54,    47,    41,
      42,     0,     0,     0,   238,   239,   240,   220,   236,   234,
     235,     0,     0,     0,     0,   225,   183,   169,    40,     0,
     223,   116,   117,   118,   221,   167,   168,   120,   237,   119,
     222,   113,    94,   115,     0,    81,   181,     0,    74,     0,
      92,     0,     0,   101,     0,   104,     0,     0,     0,   181,
     181,    74,     5,     0,     0,    56,    49,     0,     0,     0,
       0,   130,   126,   128,   129,     0,    18,   185,   171,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     110,   112,     0,     0,   124,     0,     0,     0,     0,     0,
       0,    65,    64,    71,     0,   181,    84,    85,    88,     0,
       0,     0,   181,   181,     0,   181,     0,   181,   108,    75,
      66,    79,   181,    69,   181,   215,   216,   217,    31,   218,
       0,     0,     0,    57,    51,     0,    52,    50,    43,    45,
      46,    44,   163,   224,     0,   190,   247,     0,     0,     0,
       0,   186,   188,     0,     0,   176,     0,   172,   174,   144,
     132,   131,   145,   147,   148,   138,   139,   140,   141,   142,
     143,   146,   133,   134,   135,   136,   137,     0,     0,   121,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   163,
     195,     0,   230,   227,   228,   114,     0,    82,   182,     0,
       0,    67,     0,    89,    90,    87,    91,   232,   233,    93,
     220,   236,   244,    95,   241,   242,   243,    96,    97,    98,
       0,    99,     0,   102,     0,     0,     0,    70,    68,   217,
     178,   219,     0,     0,     0,     0,    56,    55,     0,    49,
      48,     0,   161,     0,   165,    18,   160,   226,     0,   192,
       0,   184,   187,     0,   177,   170,   173,   158,     0,   155,
     156,   149,   150,   151,   152,   153,   154,     0,   229,   196,
     197,    62,    72,    73,    86,   181,   181,     0,    76,    80,
      77,     0,    32,     0,     0,   204,   210,   181,     0,   205,
       0,   218,     0,     0,    61,    60,    59,    58,    53,   162,
     127,   164,   163,   193,     0,   189,   191,   175,   157,   125,
       0,   199,   100,   103,     0,     0,   179,     0,   214,   213,
     211,    35,   206,   207,     0,     0,     0,   166,     0,   198,
       0,   202,   105,   106,     0,    78,     0,     0,     0,     0,
     181,   218,     0,   194,   200,     0,     0,     0,   180,   181,
     208,   212,     0,    36,     0,     0,   203,   231,   181,    38,
       0,     0,   181,   201,   109,   209,   181,    37,    39
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -355,     0,  -355,  -355,  -355,  -355,  -105,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,   203,  -102,  -355,
      25,  -100,  -355,    29,   282,  -355,  -355,  -355,   168,    69,
     -14,  -355,  -355,  -355,   289,  -355,  -355,  -355,  -355,    71,
    -355,  -355,  -355,   -91,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,    37,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,    83,   -28,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,    20,  -355,   -83,  -129,  -355,  -355,
    -355,    30,  -355,  -355,  -355,  -355,  -354,  -355,  -349,  -355,
    -101,  -277,  -355,  -355,  -355,  -355,  -355,   169,   170,    -4,
    -355,     5
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    11,    12,     2,     4,     3,     5,    26,     6,    27,
      28,   280,    44,    45,    29,    30,    49,    50,    51,   106,
     185,    52,   105,   182,    86,    31,    87,    32,   152,   153,
     100,   329,   172,   276,    88,   149,    33,    89,   156,   157,
     255,    34,    35,   162,    36,    37,    93,    38,    95,    39,
     384,    40,    97,   274,   142,    82,   147,   292,    69,    70,
     239,   192,    71,    72,    73,   293,   294,   295,   296,    74,
      75,   118,   206,   207,   208,   332,   151,    76,   117,   200,
     201,   202,   242,   361,   381,   396,   336,   401,   337,   388,
     338,   180,    77,   116,   320,   256,    78,    79,   263,    80,
     203,   154
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      13,   163,   179,   165,   184,   167,   186,   342,    13,   -13,
     -14,   194,    42,   107,   -15,    43,   170,   173,   103,    46,
      53,   248,     7,   108,  -242,   284,   390,  -242,  -242,  -242,
    -242,  -242,  -242,  -242,   400,   -16,   -17,    13,   399,   145,
       1,   102,   248,  -242,  -242,  -242,  -242,  -242,    47,   109,
      48,  -242,   146,    68,    83,   412,   415,    90,    91,    92,
      94,    96,   416,   104,   110,    43,   -13,   -14,   -13,   -14,
     285,   -15,   251,   -15,   155,   112,    84,   281,    85,   268,
     269,  -242,   271,  -242,   273,   148,   150,   174,    98,   277,
     289,   278,   -16,   -17,   -16,   -17,   290,   171,   111,   392,
     113,   114,   115,   169,    84,    98,    85,   238,    81,   181,
     183,   187,    53,   246,    54,    55,    56,    57,    58,    59,
      60,     9,    10,     8,    61,     8,   158,     9,    10,     9,
      10,  -122,    66,   249,   168,  -122,    62,    63,    64,   335,
     178,   250,   244,     9,    10,   189,   190,   191,    65,   252,
      66,   275,    67,    41,   258,   205,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   228,   229,   175,   176,   177,   325,
     282,   326,   241,   341,   245,   288,   345,   184,   346,   186,
     351,   195,   196,   297,   243,   197,   259,   209,     9,    10,
     143,   270,  -241,   272,   144,  -241,  -241,  -241,  -241,  -241,
    -241,  -241,   368,   264,   265,     9,    10,   283,   266,  -246,
     198,  -241,  -241,  -241,  -241,  -241,   199,   298,   302,  -241,
     132,   133,   134,   135,   136,   299,   300,   301,   138,   281,
     372,   304,   362,   363,     9,    10,   132,   133,   134,   135,
     136,   321,   305,   286,   371,   306,  -122,   287,   303,  -241,
    -122,  -241,   327,   319,   307,   331,   350,   309,   310,   311,
     312,   313,   314,   315,   316,   391,   134,   135,   136,   339,
     352,   330,   360,   359,   374,   365,   370,   323,   376,   158,
     343,   183,   378,   347,   187,   127,   128,   129,   130,   380,
     132,   133,   134,   135,   136,   395,   408,   403,   138,   407,
     188,   410,   328,    99,   348,   344,   409,   247,   322,   333,
     101,   340,   317,   324,   377,   414,   357,   257,   349,   417,
     369,   267,   355,   418,   373,   353,     0,     0,     0,     0,
     356,     0,     0,   205,     0,   358,     0,     0,     0,     0,
       0,     0,     0,  -243,     0,     0,  -243,  -243,  -243,  -243,
    -243,  -243,  -243,   230,   364,     0,     0,     0,   366,     0,
     385,   339,  -243,  -243,  -243,  -243,  -243,     0,     0,   375,
    -243,     0,     0,   339,   339,     0,     0,     0,   231,     0,
       0,   232,   233,   234,   235,   236,   237,   379,     0,     0,
     339,     0,     0,     0,   387,     0,   339,   339,     0,     0,
    -243,   389,  -243,   340,     0,   393,     0,   394,     0,     0,
       0,   397,     0,   398,     0,     0,     0,     0,     0,   404,
       0,     0,   406,   253,   254,   119,     0,     0,     0,   411,
       0,     0,   413,     0,     0,     0,     0,    54,    55,    56,
       0,    58,    59,    60,     9,    10,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,     0,   119,   138,     0,
       0,   334,     0,     0,     0,     0,     0,     0,     0,   139,
     140,   141,   335,     0,     0,     0,     9,    10,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,     0,     0,
     138,   160,   164,   161,     0,     0,     0,     0,     0,   175,
     176,   279,   140,   141,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,     0,     0,   138,   160,   166,   161,     0,     0,
       0,     0,     0,     0,     0,   139,   140,   141,     0,     0,
       0,     0,  -111,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   119,  -111,   138,     0,
    -111,  -111,  -111,  -111,  -111,  -111,     0,     0,     0,   139,
     140,   141,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   119,     0,   138,
       0,     0,     0,     0,     0,     0,   382,   383,   175,   176,
     279,   140,   141,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   119,     0,
     138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   139,   140,   141,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,     0,
     160,   138,   161,   159,     0,     0,     0,     0,     0,     0,
       0,     0,   139,   140,   141,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   119,     0,   138,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   139,   140,   141,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   119,     0,   138,     0,     0,     0,   193,     0,
       0,     0,     0,     0,     0,   139,   140,   141,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   308,   119,   138,    14,    15,    16,    17,
      18,    19,    20,     0,     0,     0,   139,   140,   141,     0,
       0,     0,    21,    22,    23,    24,    25,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   119,     0,   138,     0,     0,
       0,     0,     0,     0,     0,   318,     0,     0,   139,   140,
     141,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,     0,   119,   138,     0,
       0,     0,     0,     0,     0,     0,   354,     0,     0,   139,
     140,   141,   367,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,     0,   119,
     138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   139,   140,   141,   386,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
       0,   119,   138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   139,   140,   141,   402,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   119,     0,   138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   139,   140,   141,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   119,     0,   138,     0,   405,     0,     0,
       0,     0,     0,     0,     0,     0,   139,   140,   141,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   119,     0,   138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   139,   140,   141,
       0,     0,     0,     0,     0,     0,     0,   120,     0,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   119,     0,     0,   138,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   139,   140,
     141,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   119,     0,     0,   138,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   139,   140,
     141,     0,     0,     0,     0,     0,     0,     0,     0,   122,
       0,     0,     0,     0,   127,   128,   129,   130,     0,   132,
     133,   134,   135,   136,     0,     0,     0,   138,    54,    55,
      56,    57,    58,    59,    60,     9,    10,     0,    61,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      62,    63,    64,    54,    55,    56,    57,    58,    59,    60,
       9,    10,    65,    61,    66,     0,    67,     0,   175,   176,
     177,     0,     0,     0,     0,    62,    63,    64,     0,     0,
       0,     0,     0,     0,     0,   291,     0,    65,  -159,    66,
       0,    67,    54,    55,    56,    57,    58,    59,    60,     9,
      10,     0,    61,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    62,    63,    64,     0,     0,     0,
       0,     0,     0,     0,   204,     0,    65,     0,    66,     0,
      67,    54,    55,    56,    57,    58,    59,    60,     9,    10,
       0,    61,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    62,    63,    64,     0,     0,     0,     0,
     227,     0,     0,     0,     0,    65,     0,    66,     0,    67,
      54,    55,    56,    57,    58,    59,    60,     9,    10,     0,
      61,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    62,    63,    64,   240,     0,     0,     0,     0,
       0,     0,     0,     0,    65,     0,    66,     0,    67,    54,
      55,    56,    57,    58,    59,    60,     9,    10,     0,    61,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    62,    63,    64,     0,     0,     0,     0,     0,     0,
       0,   291,     0,    65,     0,    66,     0,    67,    54,    55,
      56,    57,    58,    59,    60,     9,    10,     0,    61,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      62,    63,    64,    54,    55,    56,   260,   261,    59,    60,
       9,   262,    65,    61,    66,     0,    67,     0,     0,     0,
       0,     0,     0,     0,     0,    62,    63,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    65,     0,    66,
       0,    67
};

static const yytype_int16 yycheck[] =
{
       4,    92,   103,    94,   106,    96,   106,   284,    12,     0,
       0,   116,    12,    57,     0,    27,    99,   100,    12,    14,
      15,   150,     0,    33,     0,    12,   375,     3,     4,     5,
       6,     7,     8,     9,   388,     0,     0,    41,   387,    62,
      13,    41,   171,    19,    20,    21,    22,    23,    60,    33,
      62,    27,    75,    16,    17,   404,   410,    20,    21,    22,
      23,    24,   411,    57,    33,    27,    57,    57,    59,    59,
      57,    57,   155,    59,    88,    58,    13,   178,    15,   162,
     163,    57,   165,    59,   167,    27,    27,   101,    14,   172,
      57,   174,    57,    57,    59,    59,    63,    27,    61,   376,
      63,    64,    65,    98,    13,    14,    15,    27,    18,   104,
     105,   106,   107,    14,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    27,    34,    27,    89,    31,    32,    31,
      32,    54,    60,    57,    97,    58,    46,    47,    48,    27,
     103,    33,   146,    31,    32,   108,   109,   110,    58,    57,
      60,    33,    62,    57,   158,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,    64,    65,    66,   270,
      17,   272,   145,   284,   147,    53,   288,   289,   288,   289,
     295,    27,    28,    59,    27,    31,   159,   160,    31,    32,
      54,   164,     0,   166,    58,     3,     4,     5,     6,     7,
       8,     9,    28,    27,    28,    31,    32,   180,    32,    53,
      56,    19,    20,    21,    22,    23,    62,    53,    57,    27,
      47,    48,    49,    50,    51,   198,   199,    61,    55,   340,
      27,   204,   325,   326,    31,    32,    47,    48,    49,    50,
      51,   246,    63,    57,   337,    57,    54,    61,    53,    57,
      58,    59,    20,    49,   227,    27,    59,   230,   231,   232,
     233,   234,   235,   236,   237,   376,    49,    50,    51,   283,
      57,   276,     5,    59,    17,    57,    57,   250,    12,   252,
     285,   286,    53,   288,   289,    42,    43,    44,    45,     9,
      47,    48,    49,    50,    51,     6,   397,   390,    55,    63,
     107,    57,   275,    31,   289,   286,   399,   149,   249,   282,
      31,   284,   239,   252,   352,   408,   306,   158,   291,   412,
     334,   161,   302,   416,   338,   298,    -1,    -1,    -1,    -1,
     303,    -1,    -1,   306,    -1,   308,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,    -1,    -1,     3,     4,     5,     6,
       7,     8,     9,    12,   327,    -1,    -1,    -1,   331,    -1,
     365,   375,    19,    20,    21,    22,    23,    -1,    -1,   342,
      27,    -1,    -1,   387,   388,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    42,    43,    44,    45,   360,    -1,    -1,
     404,    -1,    -1,    -1,   367,    -1,   410,   411,    -1,    -1,
      57,   374,    59,   376,    -1,   378,    -1,   380,    -1,    -1,
      -1,   384,    -1,   386,    -1,    -1,    -1,    -1,    -1,   392,
      -1,    -1,   395,    10,    11,    12,    -1,    -1,    -1,   402,
      -1,    -1,   405,    -1,    -1,    -1,    -1,    24,    25,    26,
      -1,    28,    29,    30,    31,    32,    -1,    -1,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    12,    55,    -1,
      -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    68,    27,    -1,    -1,    -1,    31,    32,    -1,    -1,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      55,    12,    13,    14,    -1,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    55,    12,    13,    14,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,    -1,
      -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    12,    37,    55,    -1,
      40,    41,    42,    43,    44,    45,    -1,    -1,    -1,    66,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    12,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    64,    65,
      66,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    12,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      12,    55,    14,    57,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    12,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    67,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    12,    -1,    55,    -1,    -1,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    12,    55,     3,     4,     5,     6,
       7,     8,     9,    -1,    -1,    -1,    66,    67,    68,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    12,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    63,    -1,    -1,    66,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    12,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    -1,    66,
      67,    68,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    12,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    27,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    12,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    68,    27,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    12,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    12,    -1,    55,    -1,    57,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    12,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    12,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    12,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    -1,    -1,    55,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    47,    48,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    58,    34,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    -1,    -1,    -1,    46,    47,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    56,    -1,    58,    59,    60,
      -1,    62,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    56,    -1,    58,    -1,    60,    -1,
      62,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    58,    -1,    60,    -1,    62,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    58,    -1,    60,    -1,    62,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    56,    -1,    58,    -1,    60,    -1,    62,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    47,    48,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    58,    34,    60,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    47,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,    60,
      -1,    62
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    13,    79,    81,    80,    82,    84,     0,    27,    31,
      32,    77,    78,   175,     3,     4,     5,     6,     7,     8,
       9,    19,    20,    21,    22,    23,    83,    85,    86,    90,
      91,   101,   103,   112,   117,   118,   120,   121,   123,   125,
     127,    57,    77,    27,    88,    89,   177,    60,    62,    92,
      93,    94,    97,   177,    24,    25,    26,    27,    28,    29,
      30,    34,    46,    47,    48,    58,    60,    62,   133,   134,
     135,   138,   139,   140,   145,   146,   153,   168,   172,   173,
     175,    18,   131,   133,    13,    15,   100,   102,   110,   113,
     133,   133,   133,   122,   133,   124,   133,   128,    14,   100,
     106,   110,    77,    12,    57,    98,    95,    57,    33,    33,
      33,   133,    58,   133,   133,   133,   169,   154,   147,    12,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    55,    66,
      67,    68,   130,    54,    58,    62,    75,   132,    27,   111,
      27,   152,   104,   105,   177,   106,   114,   115,   133,    57,
      12,    14,   119,   119,    13,   119,    13,   119,   133,   177,
     152,    27,   108,   152,   106,    64,    65,    66,   133,   166,
     167,   177,    99,   177,    94,    96,    97,   177,    93,   133,
     133,   133,   137,    59,    82,    27,    28,    31,    56,    62,
     155,   156,   157,   176,    56,   133,   148,   149,   150,   133,
     133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
     133,   133,   133,   133,   133,   133,   133,    53,   133,   133,
      12,    37,    40,    41,    42,    43,    44,    45,    27,   136,
      49,   133,   158,    27,   175,   133,    14,   104,   153,    57,
      33,   152,    57,    10,    11,   116,   171,   173,   175,   133,
      27,    28,    32,   174,    27,    28,    32,   174,   152,   152,
     133,   152,   133,   152,   129,    33,   109,   152,   152,    66,
      87,   166,    17,   133,    12,    57,    57,    61,    53,    57,
      63,    56,   133,   141,   142,   143,   144,    59,    53,   133,
     133,    61,    57,    53,   133,    63,    57,   133,    53,   133,
     133,   133,   133,   133,   133,   133,   133,   141,    63,    49,
     170,   177,   105,   133,   115,   119,   119,    20,   133,   107,
     177,    27,   151,   133,    16,    27,   162,   164,   166,   175,
     133,   166,   167,   177,    99,    94,    97,   177,    96,   133,
      59,    82,    57,   133,    63,   157,   133,   150,   133,    59,
       5,   159,   152,   152,   133,    57,   133,    27,    28,   175,
      57,   152,    27,   175,    17,   133,    12,   142,    53,   133,
       9,   160,    21,    22,   126,   177,    27,   133,   165,   133,
     164,   166,   167,   133,   133,     6,   161,   133,   133,   164,
     162,   163,    27,   152,   133,    57,   133,    63,   119,   152,
      57,   133,   164,   133,   152,   162,   164,   152,   152
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    76,    77,    77,    78,    78,    78,    79,    80,    79,
      81,    82,    83,    83,    83,    83,    83,    83,    84,    84,
      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
      85,    87,    86,    86,    86,    88,    88,    88,    89,    89,
      90,    91,    92,    92,    93,    93,    93,    95,    94,    96,
      96,    96,    96,    96,    98,    97,    99,    99,    99,    99,
      99,    99,   100,   102,   101,   103,   103,   103,   103,   103,
     103,   104,   104,   105,   106,   106,   106,   107,   107,   109,
     108,   111,   110,   113,   112,   114,   114,   115,   116,   116,
     116,   116,   117,   117,   118,   119,   119,   120,   121,   122,
     122,   123,   124,   124,   125,   126,   126,   128,   129,   127,
     130,   130,   130,   132,   131,   131,   133,   133,   133,   133,
     133,   133,   134,   134,   136,   135,   137,   135,   138,   138,
     138,   139,   139,   139,   139,   139,   139,   139,   139,   139,
     139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
     139,   139,   139,   139,   139,   139,   139,   140,   140,   141,
     141,   142,   142,   143,   142,   144,   144,   145,   145,   147,
     146,   148,   148,   148,   149,   149,   150,   150,   151,   151,
     151,   152,   152,   154,   153,   155,   155,   155,   156,   156,
     157,   157,   157,   157,   157,   158,   158,   159,   159,   160,
     160,   160,   161,   161,   162,   162,   162,   162,   163,   163,
     164,   165,   164,   164,   164,   166,   166,   166,   167,   167,
     168,   168,   168,   168,   168,   169,   168,   168,   168,   168,
     170,   168,   171,   171,   172,   172,   173,   173,   173,   173,
     173,   174,   174,   174,   175,   175,   176,   176,   177
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     1,     1,     3,     2,     0,     0,     3,
       2,     2,     1,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     6,     2,     2,     6,     8,    10,     9,    11,
       2,     2,     1,     3,     3,     3,     3,     0,     4,     0,
       1,     1,     1,     3,     0,     4,     0,     1,     3,     3,
       3,     3,     4,     0,     3,     3,     3,     4,     4,     3,
       4,     1,     3,     3,     0,     2,     4,     1,     3,     0,
       3,     0,     3,     0,     3,     1,     3,     2,     0,     1,
       1,     1,     2,     4,     2,     2,     2,     4,     4,     3,
       5,     2,     3,     5,     2,     1,     1,     0,     0,    10,
       1,     1,     1,     0,     3,     1,     1,     1,     1,     1,
       1,     3,     1,     3,     0,     5,     0,     5,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     4,
       4,     4,     4,     4,     4,     4,     4,     5,     4,     0,
       1,     1,     2,     0,     2,     1,     3,     1,     1,     0,
       4,     0,     1,     2,     1,     3,     1,     2,     0,     2,
       4,     0,     2,     0,     4,     0,     1,     2,     1,     3,
       1,     3,     2,     3,     5,     1,     2,     0,     2,     0,
       2,     4,     0,     2,     1,     1,     2,     2,     1,     3,
       1,     0,     4,     2,     2,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     3,     0,     4,     3,     3,     4,
       0,     8,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, parser, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  YYUSE (parser);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, parser);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, arangodb::aql::Parser* parser)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, arangodb::aql::Parser* parser)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (arangodb::aql::Parser* parser)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, scanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 465 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 2254 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 3:
#line 468 "Aql/grammar.y" /* yacc.c:1646  */
    {
      char const* p = (yyvsp[0].node)->getStringValue();
      size_t const len = (yyvsp[0].node)->getStringLength();

      if (len < 2 || *p != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE), p, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = (yyvsp[0].node);
    }
#line 2269 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 4:
#line 481 "Aql/grammar.y" /* yacc.c:1646  */
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2278 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 5:
#line 485 "Aql/grammar.y" /* yacc.c:1646  */
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2287 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 6:
#line 489 "Aql/grammar.y" /* yacc.c:1646  */
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2296 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 7:
#line 496 "Aql/grammar.y" /* yacc.c:1646  */
    {
     }
#line 2303 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 8:
#line 498 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
     }
#line 2312 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 9:
#line 501 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query()->resolver();
      auto withNode = parser->ast()->createNodeWithCollections(node, resolver);
      parser->ast()->addOperation(withNode);
     }
#line 2323 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 10:
#line 510 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2330 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 11:
#line 515 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2337 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 12:
#line 520 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2344 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 13:
#line 522 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->ast()->scopes()->endNested();
    }
#line 2352 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 14:
#line 525 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->ast()->scopes()->endNested();
    }
#line 2360 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 15:
#line 528 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->ast()->scopes()->endNested();
    }
#line 2368 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 16:
#line 531 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->ast()->scopes()->endNested();
    }
#line 2376 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 17:
#line 534 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->ast()->scopes()->endNested();
    }
#line 2384 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 18:
#line 540 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2391 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 19:
#line 542 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2398 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 20:
#line 547 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2405 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 21:
#line 549 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2412 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 22:
#line 551 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2419 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 23:
#line 553 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2426 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 24:
#line 555 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2433 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 25:
#line 557 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2440 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 26:
#line 559 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2447 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 27:
#line 561 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2454 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 28:
#line 563 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2461 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 29:
#line 565 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2468 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 30:
#line 567 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2475 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 31:
#line 572 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // first open a new scope
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);

      // now create an out variable for the FOR statement
      // this prepares us to handle the optional SEARCH condition, which may
      // or may not refer to the FOR's variable
      parser->pushStack(parser->ast()->createNodeVariable((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, true));
    }
#line 2489 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 32:
#line 580 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // now we can handle the optional SEARCH condition and OPTIONS.
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());
      TRI_ASSERT(variableNode != nullptr);
      Variable* variable = static_cast<Variable*>(variableNode->getData());
     
      AstNode* node = nullptr; 
      AstNode* search = nullptr; 
      AstNode* options = nullptr; 

      if ((yyvsp[0].node) != nullptr) {
        // we got a SEARCH and/or OPTIONS clause
        TRI_ASSERT((yyvsp[0].node)->type == NODE_TYPE_ARRAY);
        TRI_ASSERT((yyvsp[0].node)->numMembers() == 2);

        search = (yyvsp[0].node)->getMemberUnchecked(0);
        if (search->type == NODE_TYPE_NOP) {
          search = nullptr;
        }
        options = (yyvsp[0].node)->getMemberUnchecked(1);
        if (options->type == NODE_TYPE_NOP) {
          options = nullptr;
        }
      }

      if (search != nullptr) {
        // we got a SEARCH clause. this is always a view.
        node = parser->ast()->createNodeForView(variable, (yyvsp[-2].node), search, options);
        
        if ((yyvsp[-2].node)->type != NODE_TYPE_PARAMETER_DATASOURCE &&
            (yyvsp[-2].node)->type != NODE_TYPE_VIEW && 
            (yyvsp[-2].node)->type != NODE_TYPE_COLLECTION) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "SEARCH condition used on non-view", yylloc.first_line, yylloc.first_column);
        }
      } else {
        node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      }
        
      parser->ast()->addOperation(node);
    }
#line 2534 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 33:
#line 620 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2541 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 34:
#line 622 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2548 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 35:
#line 627 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto node = parser->ast()->createNodeTraversal((yyvsp[-5].strval).value, (yyvsp[-5].strval).length, (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2558 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 36:
#line 632 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto node = parser->ast()->createNodeTraversal((yyvsp[-7].strval).value, (yyvsp[-7].strval).length, (yyvsp[-5].strval).value, (yyvsp[-5].strval).length, (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2568 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 37:
#line 637 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto node = parser->ast()->createNodeTraversal((yyvsp[-9].strval).value, (yyvsp[-9].strval).length, (yyvsp[-7].strval).value, (yyvsp[-7].strval).length, (yyvsp[-5].strval).value, (yyvsp[-5].strval).length, (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2578 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 38:
#line 645 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if (!TRI_CaseEqualString((yyvsp[-3].strval).value, "TO")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", (yyvsp[-3].strval).value, yylloc.first_line, yylloc.first_column);
      }
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto node = parser->ast()->createNodeShortestPath((yyvsp[-8].strval).value, (yyvsp[-8].strval).length, (yyvsp[-6].intval), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2591 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 39:
#line 653 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if (!TRI_CaseEqualString((yyvsp[-3].strval).value, "TO")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", (yyvsp[-3].strval).value, yylloc.first_line, yylloc.first_column);
      }
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto node = parser->ast()->createNodeShortestPath((yyvsp[-10].strval).value, (yyvsp[-10].strval).length, (yyvsp[-8].strval).value, (yyvsp[-8].strval).length, (yyvsp[-6].intval), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2604 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 40:
#line 664 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2614 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 41:
#line 672 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2621 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 42:
#line 677 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2628 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 43:
#line 679 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2635 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 44:
#line 684 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 2644 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 45:
#line 688 "Aql/grammar.y" /* yacc.c:1646  */
    {
      std::string const nextName = parser->ast()->variables()->nextName();
      auto node = parser->ast()->createNodeLet(nextName.c_str(), nextName.size(), (yyvsp[0].node), false);
      parser->ast()->addOperation(node);

      arangodb::SmallVector<AstNode const*>::allocator_type::arena_type a;
      arangodb::SmallVector<AstNode const*> paths{a};
      ::destructureArray(parser, nextName, paths, (yyvsp[-2].node));
    }
#line 2658 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 46:
#line 697 "Aql/grammar.y" /* yacc.c:1646  */
    {
      std::string const nextName = parser->ast()->variables()->nextName();
      auto node = parser->ast()->createNodeLet(nextName.c_str(), nextName.size(), (yyvsp[0].node), false);
      parser->ast()->addOperation(node);

      arangodb::SmallVector<AstNode const*>::allocator_type::arena_type a;
      arangodb::SmallVector<AstNode const*> paths{a};
      ::destructureObject(parser, nextName, paths, (yyvsp[-2].node));
    }
#line 2672 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 47:
#line 709 "Aql/grammar.y" /* yacc.c:1646  */
    {
      AstNode* node = parser->ast()->createNodeArray();
      node->setIntValue(1);
      parser->pushStack(node);
    }
#line 2682 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 48:
#line 713 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 2690 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 49:
#line 719 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement(parser->ast()->createNodeValueNull());
    }
#line 2698 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 50:
#line 722 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement(parser->ast()->createNodeVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length, true));
    }
#line 2706 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 51:
#line 725 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 2714 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 52:
#line 728 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 2722 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 53:
#line 731 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2729 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 54:
#line 736 "Aql/grammar.y" /* yacc.c:1646  */
    {
      AstNode* node = parser->ast()->createNodeArray();
      node->setIntValue(2);
      parser->pushStack(node);
    }
#line 2739 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 55:
#line 740 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 2747 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 56:
#line 746 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement(parser->ast()->createNodeValueNull());
      parser->pushArrayElement(parser->ast()->createNodeValueNull());
    }
#line 2756 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 57:
#line 750 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement(parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length));
      parser->pushArrayElement(parser->ast()->createNodeVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length, true));
    }
#line 2765 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 58:
#line 754 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      parser->pushArrayElement(parser->ast()->createNodeVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length, true));
    }
#line 2774 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 59:
#line 758 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 2783 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 60:
#line 762 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 2792 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 61:
#line 766 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 2799 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 62:
#line 771 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if (!TRI_CaseEqualString((yyvsp[-2].strval).value, "COUNT")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'COUNT'", (yyvsp[-2].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.strval) = (yyvsp[0].strval);
    }
#line 2811 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 63:
#line 781 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 2820 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 64:
#line 784 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto list = static_cast<AstNode*>(parser->popStack());

      if (list == nullptr) {
        ABORT_OOM
      }
      (yyval.node) = list;
    }
#line 2833 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 65:
#line 795 "Aql/grammar.y" /* yacc.c:1646  */
    {
      /* COLLECT WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      ::startCollectScope(scopes);

      auto node = parser->ast()->createNodeCollectCount(parser->ast()->createNodeArray(), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2847 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 66:
#line 804 "Aql/grammar.y" /* yacc.c:1646  */
    {
      /* COLLECT var = expr WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        arangodb::HashSet<Variable const*> variables;
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variables, (yyvsp[-2].node));
      }

      auto node = parser->ast()->createNodeCollectCount((yyvsp[-2].node), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2864 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 67:
#line 816 "Aql/grammar.y" /* yacc.c:1646  */
    {
      /* AGGREGATE var = expr OPTIONS ... */
      arangodb::HashSet<Variable const*> variablesIntroduced;
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[-2].node))) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkIntoVariables(parser, (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[-1].node));
      parser->ast()->addOperation(node);
    }
#line 2893 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 68:
#line 840 "Aql/grammar.y" /* yacc.c:1646  */
    {
      /* COLLECT var = expr AGGREGATE var = expr OPTIONS ... */
      arangodb::HashSet<Variable const*> variablesIntroduced;
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if (!::validateAggregates(parser, (yyvsp[-2].node))) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkIntoVariables(parser, (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      // note all group variables
      arangodb::HashSet<Variable const*> groupVars;
      size_t n = (yyvsp[-3].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-3].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          groupVars.emplace(static_cast<Variable const*>(member->getMember(0)->getData()));
        }
      }

      // now validate if any aggregate refers to one of the group variables
      n = (yyvsp[-2].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-2].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          arangodb::HashSet<Variable const*> variablesUsed;
          Ast::getReferencedVariables(member->getMember(1), variablesUsed);

          for (auto& it : groupVars) {
            if (variablesUsed.find(it) != variablesUsed.end()) {
              parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN,
                "use of unknown variable '%s' in AGGREGATE expression", it->name.c_str(), yylloc.first_line, yylloc.first_column);
              break;
            }
          }
        }
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2954 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 69:
#line 896 "Aql/grammar.y" /* yacc.c:1646  */
    {
      /* COLLECT var = expr INTO var OPTIONS ... */
      arangodb::HashSet<Variable const*> variablesIntroduced;
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkIntoVariables(parser, (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node), parser->ast()->createNodeArray(), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2978 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 70:
#line 915 "Aql/grammar.y" /* yacc.c:1646  */
    {
      /* COLLECT var = expr INTO var KEEP ... OPTIONS ... */
      arangodb::HashSet<Variable const*> variablesIntroduced;
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
      }

      if ((yyvsp[-2].node) == nullptr &&
          (yyvsp[-1].node) != nullptr) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of 'KEEP' without 'INTO'", yylloc.first_line, yylloc.first_column);
      }

      if ((yyvsp[-2].node) != nullptr && (yyvsp[-2].node)->type == NODE_TYPE_ARRAY) {
        ::checkIntoVariables(parser, (yyvsp[-2].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-2].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-2].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), parser->ast()->createNodeArray(), into, intoExpression, (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3007 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 71:
#line 942 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 3014 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 72:
#line 944 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 3021 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 73:
#line 949 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3030 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 74:
#line 956 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = nullptr;
    }
#line 3038 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 75:
#line 959 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 3046 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 76:
#line 962 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 3057 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 77:
#line 971 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if (! parser->ast()->scopes()->existsVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (node == nullptr) {
        ABORT_OOM
      }

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3076 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 78:
#line 985 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if (! parser->ast()->scopes()->existsVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (node == nullptr) {
        ABORT_OOM
      }

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3095 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 79:
#line 1002 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if (!TRI_CaseEqualString((yyvsp[0].strval).value, "KEEP")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'KEEP'", (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3108 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 80:
#line 1009 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3117 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 81:
#line 1016 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3126 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 82:
#line 1019 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3135 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 83:
#line 1026 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3144 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 84:
#line 1029 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto list = static_cast<AstNode const*>(parser->popStack());
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 3154 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 85:
#line 1037 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3162 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 86:
#line 1040 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3170 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 87:
#line 1046 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeSortElement((yyvsp[-1].node), (yyvsp[0].node));
    }
#line 3178 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 88:
#line 1052 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3186 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 89:
#line 1055 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3194 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 90:
#line 1058 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 3202 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 91:
#line 1061 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3210 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 92:
#line 1067 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto offset = parser->ast()->createNodeValueInt(0);
      auto node = parser->ast()->createNodeLimit(offset, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3220 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 93:
#line 1072 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeLimit((yyvsp[-2].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3229 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 94:
#line 1079 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeReturn((yyvsp[0].node));
      parser->ast()->addOperation(node);
      parser->ast()->scopes()->endNested();
    }
#line 3239 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 95:
#line 1087 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3247 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 96:
#line 1090 "Aql/grammar.y" /* yacc.c:1646  */
    {
       (yyval.node) = (yyvsp[0].node);
     }
#line 3255 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 97:
#line 1096 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeRemove((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3267 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 98:
#line 1106 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeInsert((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3279 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 99:
#line 1116 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3292 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 100:
#line 1124 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3305 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 101:
#line 1135 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 3312 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 102:
#line 1140 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3325 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 103:
#line 1148 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3338 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 104:
#line 1159 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 3345 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 105:
#line 1164 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_UPDATE);
    }
#line 3353 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 106:
#line 1167 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_REPLACE);
    }
#line 3361 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 107:
#line 1173 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      parser->pushStack(parser->ast()->createNodeVariable(TRI_CHAR_LENGTH_PAIR(Variable::NAME_OLD), true));
    }
#line 3371 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 108:
#line 1177 "Aql/grammar.y" /* yacc.c:1646  */
    {
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      std::string const variableName = parser->ast()->variables()->nextName();
      auto forNode = parser->ast()->createNodeFor(variableName.c_str(), variableName.size(), parser->ast()->createNodeArray(), false);
      parser->ast()->addOperation(forNode);

      auto filterNode = parser->ast()->createNodeUpsertFilter(parser->ast()->createNodeReference(variableName), (yyvsp[0].node));
      parser->ast()->addOperation(filterNode);

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(variableName);
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.c_str(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);
      
      parser->pushStack(forNode);
    }
#line 3415 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 109:
#line 1215 "Aql/grammar.y" /* yacc.c:1646  */
    {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node)); 

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(TRI_CHAR_LENGTH_PAIR(Variable::NAME_OLD)), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3431 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 110:
#line 1229 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::ALL);
    }
#line 3439 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 111:
#line 1232 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::ANY);
    }
#line 3447 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 112:
#line 1235 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::NONE);
    }
#line 3455 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 113:
#line 1241 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto const scopeType = parser->ast()->scopes()->type();

      if (scopeType == AQL_SCOPE_MAIN ||
          scopeType == AQL_SCOPE_SUBQUERY) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
      }
    }
#line 3468 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 114:
#line 1248 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeDistinct((yyvsp[0].node));
    }
#line 3476 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 115:
#line 1251 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3484 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 116:
#line 1257 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3492 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 117:
#line 1260 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3500 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 118:
#line 1263 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3508 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 119:
#line 1266 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3516 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 120:
#line 1269 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3524 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 121:
#line 1272 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeRange((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3532 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 122:
#line 1278 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 3540 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 123:
#line 1281 "Aql/grammar.y" /* yacc.c:1646  */
    {
      std::string temp((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      temp.append("::");
      temp.append((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto p = parser->query()->registerString(temp);

      if (p == nullptr) {
        ABORT_OOM
      }

      (yyval.strval).value = p;
      (yyval.strval).length = temp.size();
    }
#line 3558 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 124:
#line 1297 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushStack((yyvsp[-1].strval).value);

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3569 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 125:
#line 1302 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(static_cast<char const*>(parser->popStack()), list);
    }
#line 3578 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 126:
#line 1306 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3587 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 127:
#line 1309 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("LIKE"), list);
    }
#line 3596 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 128:
#line 1316 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_PLUS, (yyvsp[0].node));
    }
#line 3604 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 129:
#line 1319 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_MINUS, (yyvsp[0].node));
    }
#line 3612 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 130:
#line 1322 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, (yyvsp[0].node));
    }
#line 3620 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 131:
#line 1328 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_OR, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3628 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 132:
#line 1331 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_AND, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3636 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 133:
#line 1334 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_PLUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3644 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 134:
#line 1337 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MINUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3652 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 135:
#line 1340 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_TIMES, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3660 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 136:
#line 1343 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_DIV, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3668 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 137:
#line 1346 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MOD, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3676 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 138:
#line 1349 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_EQ, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3684 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 139:
#line 1352 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3692 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 140:
#line 1355 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3700 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 141:
#line 1358 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3708 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 142:
#line 1361 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3716 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 143:
#line 1364 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3724 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 144:
#line 1367 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_IN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3732 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 145:
#line 1370 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NIN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3740 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 146:
#line 1373 "Aql/grammar.y" /* yacc.c:1646  */
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("LIKE"), arguments);
    }
#line 3751 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 147:
#line 1379 "Aql/grammar.y" /* yacc.c:1646  */
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("REGEX_TEST"), arguments);
    }
#line 3762 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 148:
#line 1385 "Aql/grammar.y" /* yacc.c:1646  */
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* node = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("REGEX_TEST"), arguments);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, node);
    }
#line 3774 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 149:
#line 1392 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3782 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 150:
#line 1395 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3790 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 151:
#line 1398 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3798 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 152:
#line 1401 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3806 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 153:
#line 1404 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3814 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 154:
#line 1407 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3822 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 155:
#line 1410 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3830 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 156:
#line 1413 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3838 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 157:
#line 1419 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3846 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 158:
#line 1422 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-3].node), (yyvsp[-3].node), (yyvsp[0].node));
    }
#line 3854 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 159:
#line 1428 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 3861 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 160:
#line 1430 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 3868 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 161:
#line 1435 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3876 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 162:
#line 1438 "Aql/grammar.y" /* yacc.c:1646  */
    {
      AstNode* node = parser->ast()->createNodeSpread((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 3885 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 163:
#line 1442 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 3894 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 164:
#line 1445 "Aql/grammar.y" /* yacc.c:1646  */
    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeReference(variableName);
    }
#line 3909 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 165:
#line 1458 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3917 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 166:
#line 1461 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3925 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 167:
#line 1467 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3933 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 168:
#line 1470 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3941 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 169:
#line 1476 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 3950 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 170:
#line 1479 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->popArray();
    }
#line 3958 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 171:
#line 1485 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 3965 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 172:
#line 1487 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 3972 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 173:
#line 1489 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 3979 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 174:
#line 1494 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 3986 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 175:
#line 1496 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 3993 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 176:
#line 1501 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4001 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 177:
#line 1504 "Aql/grammar.y" /* yacc.c:1646  */
    {
      AstNode* node = parser->ast()->createNodeSpread((yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 4010 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 178:
#line 1511 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = nullptr;
    }
#line 4018 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 179:
#line 1514 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }

      // we always return an array with two values: SEARCH and OPTIONS
      // as only one of these values will be set here, the other value is NOP
      AstNode* node = parser->ast()->createNodeArray(2);
      // only one extra qualifier. now we need to check if it is SEARCH or OPTIONS

      if (TRI_CaseEqualString((yyvsp[-1].strval).value, "SEARCH")) {
        // found SEARCH
        node->addMember((yyvsp[0].node));
        node->addMember(parser->ast()->createNodeNop());
      } else { 
        // everything else must be OPTIONS
        if (!TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' or 'OPTIONS'", (yyvsp[-1].strval).value, yylloc.first_line, yylloc.first_column);
        }

        node->addMember(parser->ast()->createNodeNop());
        node->addMember((yyvsp[0].node));
      }

      (yyval.node) = node;
    }
#line 4049 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 180:
#line 1540 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if ((yyvsp[-2].node) == nullptr) {
        ABORT_OOM
      }
      
      // two extra qualifiers. we expect them in the order: SEARCH, then OPTIONS

      if (!TRI_CaseEqualString((yyvsp[-3].strval).value, "SEARCH") ||
          !TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' and 'OPTIONS'", (yyvsp[-3].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray(2);
      node->addMember((yyvsp[-2].node));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 4071 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 181:
#line 1560 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = nullptr;
    }
#line 4079 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 182:
#line 1563 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }

      if (!TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", (yyvsp[-1].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = (yyvsp[0].node);
    }
#line 4095 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 183:
#line 1577 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
    }
#line 4104 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 184:
#line 1580 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 4112 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 185:
#line 1586 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 4119 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 186:
#line 1588 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 4126 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 187:
#line 1590 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 4133 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 188:
#line 1595 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 4140 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 189:
#line 1597 "Aql/grammar.y" /* yacc.c:1646  */
    {
    }
#line 4147 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 190:
#line 1602 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // attribute-name-only (comparable to JS enhanced object literals, e.g. { foo, bar })
      auto ast = parser->ast();
      auto variable = ast->scopes()->getVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length, true);

      if (variable == nullptr) {
        // variable does not exist
        parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, "use of unknown variable '%s' in object literal", (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      // create a reference to the variable
      auto node = ast->createNodeReference(variable);
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, node);
    }
#line 4166 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 191:
#line 1616 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 4175 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 192:
#line 1620 "Aql/grammar.y" /* yacc.c:1646  */
    {
      AstNode* node = parser->ast()->createNodeSpread((yyvsp[0].node));
      parser->pushObjectElement(node);
    }
#line 4184 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 193:
#line 1624 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // bind-parameter : attribute-value
      if ((yyvsp[-2].strval).length < 1 || (yyvsp[-2].strval).value[0] == '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE), (yyvsp[-2].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto param = parser->ast()->createNodeParameter((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      parser->pushObjectElement(param, (yyvsp[0].node));
    }
#line 4198 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 194:
#line 1633 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // [ attribute-name-expression ] : attribute-value
      parser->pushObjectElement((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 4207 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 195:
#line 1640 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.intval) = 1;
    }
#line 4215 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 196:
#line 1643 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 4223 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 197:
#line 1649 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = nullptr;
    }
#line 4231 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 198:
#line 1652 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4239 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 199:
#line 1658 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = nullptr;
    }
#line 4247 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 200:
#line 1661 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeArrayLimit(nullptr, (yyvsp[0].node));
    }
#line 4255 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 201:
#line 1664 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeArrayLimit((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4263 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 202:
#line 1670 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = nullptr;
    }
#line 4271 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 203:
#line 1673 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4279 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 204:
#line 1679 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4287 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 205:
#line 1682 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4295 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 206:
#line 1685 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto tmp = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), tmp);
    }
#line 4304 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 207:
#line 1689 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), (yyvsp[0].node));
    }
#line 4312 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 208:
#line 1695 "Aql/grammar.y" /* yacc.c:1646  */
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 4321 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 209:
#line 1699 "Aql/grammar.y" /* yacc.c:1646  */
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 4330 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 210:
#line 1706 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeArray();
      node->addMember((yyvsp[0].node));
      auto const& resolver = parser->query()->resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 4341 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 211:
#line 1712 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
      node->addMember((yyvsp[-1].node));
    }
#line 4351 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 212:
#line 1716 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query()->resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 4361 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 213:
#line 1721 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // graph name
      (yyval.node) = (yyvsp[0].node);
    }
#line 4370 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 214:
#line 1725 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4379 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 215:
#line 1734 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.intval) = 2;
    }
#line 4387 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 216:
#line 1737 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.intval) = 1;
    }
#line 4395 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 217:
#line 1740 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.intval) = 0;
    }
#line 4403 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 218:
#line 1746 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), 1);
    }
#line 4411 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 219:
#line 1749 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), (yyvsp[-1].node));
    }
#line 4419 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 220:
#line 1755 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // variable or collection or view
      auto ast = parser->ast();
      AstNode* node = nullptr;

      auto variable = ast->scopes()->getVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length, true);

      if (variable == nullptr) {
        // variable does not exist
        // now try special variables
        if (ast->scopes()->canUseCurrentVariable() && strcmp((yyvsp[0].strval).value, "CURRENT") == 0) {
          variable = ast->scopes()->getCurrentVariable();
        }
        else if (strcmp((yyvsp[0].strval).value, Variable::NAME_CURRENT) == 0) {
          variable = ast->scopes()->getCurrentVariable();
        }
      }

      if (variable != nullptr) {
        // variable alias exists, now use it
        node = ast->createNodeReference(variable);
      }

      if (node == nullptr) {
        // variable not found. so it must have been a collection or view
        auto const& resolver = parser->query()->resolver();
        node = ast->createNodeDataSource(resolver, (yyvsp[0].strval).value, (yyvsp[0].strval).length, arangodb::AccessMode::Type::READ, true, false);
      }

      TRI_ASSERT(node != nullptr);

      (yyval.node) = node;
    }
#line 4457 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 221:
#line 1788 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4465 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 222:
#line 1791 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4473 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 223:
#line 1794 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);

      if ((yyval.node) == nullptr) {
        ABORT_OOM
      }
    }
#line 4485 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 224:
#line 1801 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if ((yyvsp[-1].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyval.node) = parser->ast()->createNodePassthru((yyvsp[-1].node));
      }
      else {
        (yyval.node) = (yyvsp[-1].node);
      }
    }
#line 4500 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 225:
#line 1811 "Aql/grammar.y" /* yacc.c:1646  */
    {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 4509 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 226:
#line 1814 "Aql/grammar.y" /* yacc.c:1646  */
    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeReference(variableName);
    }
#line 4524 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 227:
#line 1824 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // named variable access, e.g. variable.reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // dive into the expansion's right-hand child nodes for further expansion and
        // patch the bottom-most one
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeAttributeAccess(current->getMember(1), (yyvsp[0].strval).value, (yyvsp[0].strval).length));
        (yyval.node) = (yyvsp[-2].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeAttributeAccess((yyvsp[-2].node), (yyvsp[0].strval).value, (yyvsp[0].strval).length);
      }
    }
#line 4544 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 228:
#line 1839 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // named variable access, e.g. variable.@reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeBoundAttributeAccess(current->getMember(1), (yyvsp[0].node)));
        (yyval.node) = (yyvsp[-2].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeBoundAttributeAccess((yyvsp[-2].node), (yyvsp[0].node));
      }
    }
#line 4563 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 229:
#line 1853 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // indexed variable access, e.g. variable[index]
      if ((yyvsp[-3].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-3].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeIndexedAccess(current->getMember(1), (yyvsp[-1].node)));
        (yyval.node) = (yyvsp[-3].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeIndexedAccess((yyvsp[-3].node), (yyvsp[-1].node));
      }
    }
#line 4582 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 230:
#line 1867 "Aql/grammar.y" /* yacc.c:1646  */
    {
      // variable expansion, e.g. variable[*], with optional FILTER, LIMIT and RETURN clauses
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      }
      else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 4610 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 231:
#line 1889 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-7].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
        (yyvsp[-7].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-7].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
      }
    }
#line 4633 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 232:
#line 1910 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4641 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 233:
#line 1913 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4649 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 234:
#line 1919 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }

      (yyval.node) = (yyvsp[0].node);
    }
#line 4661 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 235:
#line 1926 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }

      (yyval.node) = (yyvsp[0].node);
    }
#line 4673 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 236:
#line 1936 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4681 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 237:
#line 1939 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4689 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 238:
#line 1942 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeValueNull();
    }
#line 4697 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 239:
#line 1945 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 4705 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 240:
#line 1948 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 4713 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 241:
#line 1954 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto const& resolver = parser->query()->resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, (yyvsp[0].strval).value, (yyvsp[0].strval).length, arangodb::AccessMode::Type::WRITE);
    }
#line 4722 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 242:
#line 1958 "Aql/grammar.y" /* yacc.c:1646  */
    {
      auto const& resolver = parser->query()->resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, (yyvsp[0].strval).value, (yyvsp[0].strval).length, arangodb::AccessMode::Type::WRITE);
    }
#line 4731 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 243:
#line 1962 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if ((yyvsp[0].strval).length < 2 || (yyvsp[0].strval).value[0] != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4743 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 244:
#line 1972 "Aql/grammar.y" /* yacc.c:1646  */
    {
      if ((yyvsp[0].strval).length < 2 || (yyvsp[0].strval).value[0] != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4755 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 245:
#line 1979 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.node) = parser->ast()->createNodeParameter((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4763 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 246:
#line 1985 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4771 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 247:
#line 1988 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4779 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;

  case 248:
#line 1993 "Aql/grammar.y" /* yacc.c:1646  */
    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4787 "Aql/grammar.cpp" /* yacc.c:1646  */
    break;


#line 4791 "Aql/grammar.cpp" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, parser, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, parser, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, parser, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
